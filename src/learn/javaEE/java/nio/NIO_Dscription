NIO主要有三大核心部分：Channel(通道)，Buffer(缓冲区), Selector。
传统IO基于字节流和字符流进行操作，而NIO基于Channel和Buffer(缓冲区)进行操作，
数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。
Selector(选择区)用于监听多个通道的事件（比如：连接打开，数据到达）
单个线程可以监听多个数据通道
Java NIO可以让你非阻塞的使用IO，例如：当线程从通道读取数据到缓冲区时，
线程还是可以进行其他事情。当数据被写入到缓冲区时，线程可以继续处理它。
从缓冲区写入通道也类似。

NIO和传统IO（一下简称IO）之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的
Java IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。
此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。
NIO的缓冲导向方法略有不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。
这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。
而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据

IO的各种流是阻塞的。这意味着，当一个线程调用read() 或 write()时，
该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。
NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，
如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，
所以直至数据变的可以读取之前，该线程可以继续做其他的事情.

Channel和IO中的Stream(流)是差不多一个等级的。只不过Stream是单向的
而Channel是双向的，既可以用来进行读操作，又可以用来进行写操作

NIO抽象与现实中存在的实体有着非常直接的联系
NIO特性:
1.为所有的原始类型提供(Buffer)缓存
2.字符集编码解码解决方案
3.Channel:一个新的原始I/O抽象
4.支持锁和内存映射文件的文件访问接口
5.提供多路(non-bloking)非阻塞式的高伸缩性的网络IO

NIO的创建目的是为了让Java程序员可以实现高速I/O而无需编写自定义的
本机代码。NIO将最耗时的I/O操作(即填充和提取缓冲区)转移回操作系统，
因而可以极大地提高速度
原来的I/O库(在java.io.*中)与NIO最重要的区别是数据打包和传输的方式
正如前面提到的,原来的I/O以流的方式处理数据
而NIO以块的方式处理数据
面向流的I/O系统一次一个字节地处理数据。
一个输入流产生一个字节的数据,一个输出流消费一个字节的数据.
为流式数据创建过滤器非常容易,连接几个过滤器,以便每个过滤器只负责单
个复杂处理机制的一部分,这样也是相对简单的.不利的一面是,面向流的I/O
通常相当慢
一个面向块的I/O系统以块的形式处理数据。每一个操作都在一步中产生或者
消费一个数据块.按块处理数据比按(流式的)字节处理数据要快的多,但是面
向块的I/O缺少一些面向流的I/O所具有的优雅性和简单性


