通过数据流、序列化和文件系统提供系统输入和输出。
因为IO包中的所有类都是基于流进行操作的。所以，要明白流的概念。
流是一种抽象概念，它代表了数据的无结构化传递。
按照流的方式进行输入输出，数据被当成无结构的字节序列或字符序列。
IO操作的过程中，任何需要被传递的数据，在经过IO类库处理前后是不同的。
我们可以把数据的表示分为两种：内部表示和外部表示
数据的内部表示便于程序进行数据处理。典型的内部表示有：整型数的二进制表示、浮点数的
IEEE表示、字符的ASCII或Unicode编码表示
数据的外部表示则根据不同的外部设备的需要，有具体不同的表现形式
标准IO流的主要目的是支持文本IO，不直接支持二进制IO

虽然IO流是以流的方式进行数据传递，但这并不表明传递的数据不能有任何结构，
而是指IO流的概念是以流的方式进行输入输出，所传递数据的内部结构隐藏在对流数据的解释中

在IO流里，输入输出分为4步：格式化/解析，缓冲，编码转换和传递
格式化/解析：在内部数据表示（以字节为单位）与外部数据表示（以字符为单位）之间进行双向转换。
    例如一个2字节的整数10002，就需要5个字符来表示
缓冲：用于在格式/解析与传递只加缓存字符序列。对于输出，较短的字符序列格式化之后并不马上输出，
    而是保存在缓冲区里，待累积到一定规模之后再传递到外部设备。
    相反，从外部设备读入的大量数据也是先放在缓冲区，然后逐步取出完成输入。
    默认时，IO流的输入输出都是经过缓冲的，也可以让IO流工作在无缓冲模式下。
编码转换： 是将一种字符表达式转换成另一种字符表达式。如果格式化产生的字符表达式与外部字符表达式不同（输出时），
    或者外部表达式与IO流能解析的表达式不同（输入时），就必须进行编码转换。
    如多字节编码与宽字符编码之间的转换等。多数情况下并不需要进行编码转换。
传递：主要是与外部设备进行通信。输出时，传递负责将经过格式化、缓冲即编码转换后的字符序列发送到外部设备；
    输入时，则负责将外部设备抽取数据，为其后进行的编码转换、缓冲及解析提供字符序列。


学习IO从输入输出流入手
Io中的输入输出流：
InputStream   OutputStream
Read       Writer
这四个输入输出流都是抽象类,IO流通过装饰者（包装）模式
装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。
装饰模式通过创建一个包装对象，也就是装饰，来包裹真实的对象。
装饰模式以对客户端透明的方式动态地给一个对象附加上更多的责任。
换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。
装饰模式可以在不创造更多子类的情况下，将对象的功能加以扩展。
装饰模式把客户端的调用委派到被装饰类。装饰模式的关键在于这种扩展是完全透明的。

java IO包中有四大等级结构InputStream，outputStream, InputStreamReader,outputStreamReader
InputStream和OutputStream处理8位字节流数据, Reader和Writer处理16位的字符流数据
InputStream和Reader处理输入, OutputStream和Writer处理输出
各个体系内部用到的都是装饰者模式
InputStream和InputStreamReader之间，outputStream和outputStreamReader之间用的是适配器模式

InputStream的类图关系
class java.lang.Object
|
|—class java.io.InputStream //输入流，字节形式，为以下的基类
| |
| |——ByteArrayInputStream //从字节数组中读取
| |
| |——FileInputStream //从文件中读取数据
| |
| |—— FilterInputStream //过滤流的基类,
| | | // 过滤可以了解为各种处理技术的形象称呼
| | |
| | |——BufferedInputStream //缓冲技术，
| | | // 数据来自底层输入流
| | |
| | |——DataInputStream //可读java数据类型
| | |
| | |——PushbackInputStream //缓冲技术，
| | | // 数据来自任意输入流
| | |
| | |——java.util.zip.GZIPInputStream
| | | //不是java.io包中的流。压缩技术
| | |
| | |——java.security.DigestInputStream
| | | //不是java.io包中的流。处理流的摘要
| | |
| |—— .......
从图中可以看出，InputStream就是装饰者模式中的超类（Component），
ByteArrayInputStream，FileInputStream相当于被装饰者（ConcreteComponent），这些类都提供了最基本的字节读取功能。
而另外一个和这两个类是同一级的类FilterInputStream即是装饰者（Decorator），BufferedInputStream，DataInputStream，PushbackInputStream…这些都是被装饰者装饰后形成的成品。
一个缺点：装饰者模式的实现对于使用者是透明的，当使用者不熟悉你的实现的时，就很难理解。
同理OutputStream类似.

流:表示任何有能力产出数据的数据源对象或有能力接受数据的接受端对象
流屏蔽了实际的I/O设备中处理数据的细节

BufferedWriter一定要注意,一定要在每次写完一次后进行一下缓冲区的刷新flush()
PrintWriter的构造中有一个参数autoFlush,直接设置成true即可避免


IO两大块:处理文件本身的(创建文件等等)和读取文件本身




