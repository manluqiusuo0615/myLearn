ArrayList类继承了AbstractList抽象类，实现了List，RandomAccess，Cloneable，Serializable接口
RandomAccess 是一个标记接口，用于标明实现该接口的List支持快速随机访问，
主要目的是使算法能够在随机和顺序访问的list中表现的更加高效
//默认容量
private static final int DEFAULT_CAPACITY = 10;
//空元素数据容器
private static final Object[] EMPTY_ELEMENTDATA = {};
//默认容量的空元素数据容器
private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};
//元素数据容器
transient Object[] elementData;
//要分配的数组的最大大小
private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;

开始定义了三个容器：
空元素容器，默认容量空元素容器，元素数据容器
//一个变量 size  但并不是elementData的长度
private int size;
//构造1
public ArrayList(int initialCapacity) {
	if (initialCapacity > 0) {
            this.elementData = new Object[initialCapacity];
        } else if (initialCapacity == 0) {
            this.elementData = EMPTY_ELEMENTDATA;
        } else {
            throw new IllegalArgumentException("Illegal Capacity: "+initialCapacity);
        }
    }
构造1其实就是给开始定义的变量  elementData 元素赋值。
//构造2
public ArrayList() {
        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
    }
构造2  无参构造也是为定义的变量  elementData  赋值。
//构造3
public ArrayList(Collection<? extends E> c) {
        elementData = c.toArray();
        if ((size = elementData.length) != 0) {
            // c.toArray might (incorrectly) not return Object[] (see 6260652)
            if (elementData.getClass() != Object[].class)
                elementData = Arrays.copyOf(elementData, size, Object[].class);
        } else {
            // replace with empty array.
            this.elementData = EMPTY_ELEMENTDATA;
        }
    }
//构造3将传入的集合转成数组，赋值给  elementData  属性。
传入的集合要是不为空，就转换为数组  赋给  elementData
如果为空，就将  空元素数据容器  赋给  elementData

//抽象类AbstractList中定义了modCount的初始值
protected transient int modCount = 0;

public void trimToSize() {
        modCount ++;
        if (size < elementData.length) {
            elementData = (size == 0) ? EMPTY_ELEMENTDATA : Arrays.copyOf(elementData, size);
        }
    }
//确保容量的大小  获得容量的大小
public void ensureCapacity(int minCapacity) {
        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) ? 0 : DEFAULT_CAPACITY;
            // any size if not default element table

            // larger than default for default empty table. It's already
            // supposed to be at default size.


        if (minCapacity > minExpand) {
            ensureExplicitCapacity(minCapacity);
        }
    }






public int size() {
        return size;
    }

public boolean isEmpty() {
        return size == 0;
    }

public boolean contains(Object o) {
	//匹配成功
        return indexOf(o) >= 0;
    }

public int indexOf(Object o) {
        if (o == null) {
            for (int i = 0; i < size; i++)
                if (elementData[i]==null)
                    return i;
        } else {
            for (int i = 0; i < size; i++)
                if (o.equals(elementData[i]))
                    return i;
        }
        return -1;
    }

public int lastIndexOf(Object o) {
        if (o == null) {
            for (int i = size-1; i >= 0; i--)
                if (elementData[i]==null)
                    return i;
        } else {
            for (int i = size-1; i >= 0; i--)
                if (o.equals(elementData[i]))
                    return i;
        }
        return -1;
    }

public Object clone() {
        try {
            ArrayList<?> v = (ArrayList<?>) super.clone();
            v.elementData = Arrays.copyOf(elementData, size);
            v.modCount = 0;
            return v;
        } catch (CloneNotSupportedException e) {
            // this shouldn't happen, since we are Cloneable
            throw new InternalError(e);
        }
    }

public Object[] toArray() {
        return Arrays.copyOf(elementData, size);
    }

public <T> T[] toArray(T[] a) {
        if (a.length < size)
            // Make a new array of a's runtime type, but my contents:
            return (T[]) Arrays.copyOf(elementData, size, a.getClass());
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size)
            a[size] = null;
        return a;
    }

E elementData(int index) {
        return (E) elementData[index];
    }

public E get(int index) {
        rangeCheck(index);

        return elementData(index);
    }

public E set(int index, E element) {
        rangeCheck(index);

        E oldValue = elementData(index);
        elementData[index] = element;
        return oldValue;
    }

public boolean add(E e) {
	//初始化的时候，经过  ensureCapacityInternal  方法后
	//elementData  变成了  容量为10的一个数组容器
	//当size 变成 10 的时候

	//会对  elementData  进行一次扩容
	//扩容的大小为  原大小 + 原大小/2
        ensureCapacityInternal(size + 1);  // Increments modCount!!
	//然后  将size这个初始值为0的变量变成了1  elementData[1] =  e;
	//当再次进入add方法的时候
	//走到  elementData[size++] = e;时，就变成了elementData[2] =  e;
        elementData[size++] = e;
        return true;
    }
//其实该操作就是为了  查看  底层数组容量大小
//是否达到  临界
//如果达到就扩容
//没达到就返回  minCapacity
private void ensureCapacityInternal(int minCapacity) {
        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));
    }

//计算容量的大小
//java.lang.Math.max(参数1，参数2)是一个静态的工具方法，主要用来比较两个相同类型参数的大小
//返回两个值中较大的一个
//所以如果初始化没有定义大小的时候
//默认返回的是DEFAULT_CAPACITY   10
private static int calculateCapacity(Object[] elementData, int minCapacity) {
        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
            return Math.max(DEFAULT_CAPACITY, minCapacity);
        }
        return minCapacity;
        }
//执行记录操作  和  进行扩容和对 elementData 处理
private void ensureExplicitCapacity(int minCapacity) {
	//每次执行该方法，都会记录一次  modCount
        modCount ++;

        // overflow-conscious code
        if (minCapacity - elementData.length > 0)
            grow(minCapacity);
    }
//执行扩容   和   返回新数组
private void grow(int minCapacity) {
        // overflow-conscious code
        int oldCapacity = elementData.length;
	//当执行add方法到第一次初始化临界值  10的时候
	//newCapacity  就变成了15；
        int newCapacity = oldCapacity + (oldCapacity >> 1);
        if (newCapacity - minCapacity < 0)
	    //后续利用  newCapacity  值
	    //进行了扩容
	    //elementData = Arrays.copyOf(elementData, newCapacity);
            newCapacity = minCapacity;
        if (newCapacity - MAX_ARRAY_SIZE > 0)
            newCapacity = hugeCapacity(minCapacity);
        // minCapacity is usually close to size, so this is a win:
        elementData = Arrays.copyOf(elementData, newCapacity);
    }
private static int hugeCapacity(int minCapacity) {
        if (minCapacity < 0) // overflow
            throw new OutOfMemoryError();
        return (minCapacity > MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;
    }

public void add(int index, E element) {
        rangeCheckForAdd(index);

        ensureCapacityInternal(size + 1);  // Increments modCount!!
	//实现数组之间的复制
	//elementData:源数组
	//index:源数组要复制的起始位置
	//elementData:目的数组
	//index + 1:目的数组放置的起始位置
	//size - index:复制的长度
        System.arraycopy(elementData, index, elementData, index + 1,size - index);
        elementData[index] = element;
        size++;
    }
//检查  越界
private void rangeCheckForAdd(int index) {
        if (index > size || index < 0)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }
private String outOfBoundsMsg(int index) {
        return "Index: "+index+", Size: "+size;
    }
//删除参数中所有元素
public boolean removeAll(Collection<?> c) {
        Objects.requireNonNull(c);
        return batchRemove(c, false);
    }
//保留参数中所有元素
public boolean retainAll(Collection<?> c) {
        Objects.requireNonNull(c);
        return batchRemove(c, true);
    }

private boolean batchRemove(Collection<?> c, boolean complement) {
	//首先获取底层数组，并赋值给一个final的同名临时变量
        final Object[] elementData = this.elementData;
	//定义变量r和w都为0。定义布尔值变量modified默认为false，代表数组已经更改
        int r = 0, w = 0;
        boolean modified = false;
        try {
	    //变量r进行循环自增，循环size次，也就是底层数组的长度次
	    //进入循环后先判断参数集合是否是否包含本集合底层数组每一个元素，
	    //如果是第一个方法调进来的，且不包含，那么第r个元素将赋给第w个元素，然后w自增
	    //集合{1,2,3,4}比对  集合{1,2,3}
	    //先循环1,2,3发现参数中有1,2,3所以不处理
	    //到4的时候，因为不包含，所以 将4 赋值给了第 0 位
	    //然后w++变成了1
            for (; r < size; r++)
                if (c.contains(elementData[r]) == complement)
                    elementData[w++] = elementData[r];
        }
	//finally块里如果r最后不等于size，就将底层数组的第r位开始复制到w处，复制size-r个
	//就是让没有进行遍历的数组元素复制到数组中用来恢复原状
	//然后将r与size相差的位数加给w

	finally {
            // Preserve behavioral compatibility with AbstractCollection,
            // even if c.contains() throws.
            if (r != size) {
                System.arraycopy(elementData, r,elementData, w,size - r);
                w += size - r;
            }
	    //如果w不等于size，也就是说已经将该移位的元素进行了移位，该将该删除的元素删除的时候，
	    //w处之后的元素全部设为空值。size赋值为w，modified变为true代表对数组进行了修改，
	    //modCount位size减去w次。最后返回modified
            if (w != size) {
                // clear to let GC do its work
                for (int i = w; i < size; i++)
                    elementData[i] = null;
                modCount += size - w;
                size = w;
                modified = true;
            }
        }
        return modified;
    }

private void writeObject(java.io.ObjectOutputStream s)
	throws java.io.IOException{
	// Write out element count, and any hidden stuff
	int expectedModCount = modCount;
	s.defaultWriteObject();

	// Write out size as capacity for behavioural compatibility with clone()
	s.writeInt(size);

	// Write out all elements in the proper order.
	for (int i=0; i<size; i++) {
	    s.writeObject(elementData[i]);
	}

	if (modCount != expectedModCount) {
	    throw new ConcurrentModificationException();
	}
}

private void readObject(java.io.ObjectInputStream s)
        throws java.io.IOException, ClassNotFoundException {
        elementData = EMPTY_ELEMENTDATA;

        // Read in size, and any hidden stuff
        s.defaultReadObject();

        // Read in capacity
        s.readInt(); // ignored

        if (size > 0) {
            // be like clone(), allocate array based upon size not capacity
            int capacity = calculateCapacity(elementData, size);
            SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity);
            ensureCapacityInternal(size);

            Object[] a = elementData;
            // Read in all elements in the proper order.
            for (int i=0; i<size; i++) {
                a[i] = s.readObject();
            }
        }
    }

public ListIterator<E> listIterator(int index) {
        if (index < 0 || index > size)
            throw new IndexOutOfBoundsException("Index: "+index);
        return new ListItr(index);
    }

public ListIterator<E> listIterator() {
        return new ListItr(0);
    }

public Iterator<E> iterator() {
        return new Itr();
    }

