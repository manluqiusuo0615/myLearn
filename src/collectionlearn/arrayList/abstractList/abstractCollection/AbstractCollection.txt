AbstractCollection抽象类实现了Collection接口
<<      :     左移运算符，num << 1,相当于num乘以2
>>      :     右移运算符，num >> 1,相当于num除以2
>>>     :     无符号右移，忽略符号位，空位都以0补齐
public abstract Iterator<E> iterator();
public abstract int size();
public boolean isEmpty() {
    return size() == 0;
}
//实现了contains方法
//迭代器返回的元素与传入的对象进行比对
//如果在内存中的位置相同就返回true
public boolean contains(Object o) {
    Iterator<E> it = iterator();
    //如果传入的为null,则全部遍历完后返回true
    if (o==null) {
        while (it.hasNext())
            if (it.next()==null)
                return true;
    } else {
        while (it.hasNext())
            if (o.equals(it.next()))
                return true;
    }
    return false;
}
public Object[] toArray() {
    Object[] r = new Object[size()];
    Iterator<E> it = iterator();
    for (int i = 0; i < r.length; i++) {
        //如果迭代器没有下一个，就说明是最后一个元素
        if (! it.hasNext())
            //可以直接传回一个新的数组对象
            return Arrays.copyOf(r, i);
        r[i] = it.next();
    }
    return it.hasNext() ? finishToArray(r, it) : r;
}

public <T> T[] toArray(T[] a) {
    int size = size();
    //Array.newInstance创建一个具有指定组件类型和长度的新数组
    T[] r = a.length >= size ? a : (T[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
    Iterator<E> it = iterator();

    for (int i = 0; i < r.length; i++) {
        if (! it.hasNext()) { // fewer elements than expected
            if (a == r) {
                r[i] = null; // null-terminate
            } else if (a.length < i) {
                return Arrays.copyOf(r, i);
            } else {
                System.arraycopy(r, 0, a, 0, i);
                if (a.length > i) {
                    a[i] = null;
                }
            }
            return a;
        }
        r[i] = (T)it.next();
    }
    // more elements than expected
    return it.hasNext() ? finishToArray(r, it) : r;
}
1.先根据size()的大小生成一个数组，然后根据迭代器的hasNext来判断，当前迭代器后面还有没有值，并用i记录当前的已经存入的元素数量。
2.如果迭代器实际迭代的数量的大小比size小则使用Arrays.copyOf来截断当前的数组，然后直接返回。
3.需要说明的是Arrays的静态方法是java针对数组来实现的一系列方法。其中copyOf将传入的数组复制到一个新的数组中，新的数组的大小由第二个参数来指定。
4.但是如果size的大小小于迭代器迭代的元素。则调用finishToArray来完成之后迭代器的实现

首先一个是使用三目运算来调整返回值，比使用if方法显得简洁的多。我之前很少用这样的方法来实现返回值。需要说明的是if和三目运算的一个重大的区别是三目运算是必须要返回值的。
二个有意思的地方，迭代顺序是根据具体的迭代器的实现来确定的，这就给了编程人员比较大的自由，比如说可以在这个基础上在写一个由迭代器参数的toArray方法。这样就可以从集合中间写迭代器
第三个有意思的地方是这个返回的数组是Object类数组。也就说在使用的时候可能需要强制类型转换。
第四个有意思的地方使我很好奇，这个方法应该是没有办法保证集合中间不产生的空隙的，比如说集合中的元素是这样的[1,null,2]这样的话，迭代器是否可以正确的实现呢？是添加一个null到数组还是只填入1而忽略后面的。不过这个类是个抽象类，没办法直接实例化，具体还是等看到后面的可实例化的类在说吧。

虚拟机通常会放几个头信息在数组中
private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;

private static <T> T[] finishToArray(T[] r, Iterator<?> it) {
    int i = r.length;
    while (it.hasNext()) {
        int cap = r.length;
        if (i == cap) {
            //cap=cap+cap>>1+1。为了防止cap等于2
            int newCap = cap + (cap >> 1) + 1;
            // overflow-conscious code
            if (newCap - MAX_ARRAY_SIZE > 0)
                newCap = hugeCapacity(cap + 1);
            r = Arrays.copyOf(r, newCap);
        }
        r[i++] = (T)it.next();
    }
    // trim if overallocated
    return (i == r.length) ? r : Arrays.copyOf(r, i);
}

这个方法保存两个int。一个表示当前的迭代的元素的数量，总的来说i每次进入循环体就增加一个，而另一个cap表示当前的数组的大小。
每次进入循环体，先用cap确认下数组的长度。如果i还没有增长到cap相同的程度则只要将迭代器的下一个元素放入数组并将i加一就行
如果i==cap的时候说明需要增大cap。这里增加的cap的一半并加1的大小，然后判断下新的数组的大小是否超过VM的最大界限，如果没有就将继续循环体。
在返回的时候使用根据已经迭代的元素i来复制当前数组到一个新的数组中。
这里如果判断newCap大小超过了最大的数组大小则调动hugeCapacity调整大小。这里需要说明在AbstractCollection类中间声明了一个静态私有常量MAX_ARRAY_SIZE数值为Integer.MAX_VALUE - 8。按照源码里的说明是虚拟机通常会放几个头信息在数组中。

//确定数组极限的值
//如果传入的值大于极限值就用设定的值
//否则使用极限值(MAX_ARRAY_SIZE)
private static int hugeCapacity(int minCapacity) {
    if (minCapacity < 0) // overflow
        throw new OutOfMemoryError
            ("Required array size too large");
    return (minCapacity > MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;
}
public boolean add(E e) {
    throw new UnsupportedOperationException();
}

public boolean remove(Object o) {
    Iterator<E> it = iterator();
    if (o==null) {
        while (it.hasNext()) {
            if (it.next()==null) {
                it.remove();
                return true;
            }
        }
    } else {
        while (it.hasNext()) {
            if (o.equals(it.next())) {
                it.remove();
                return true;
            }
        }
    }
    return false;
}

public boolean containsAll(Collection<?> c) {
    for (Object e : c)
        if (!contains(e))
            return false;
    return true;
}

public boolean addAll(Collection<? extends E> c) {
    boolean modified = false;
    for (E e : c)
        if (add(e))
            modified = true;
    return modified;
}

public boolean removeAll(Collection<?> c) {
    Objects.requireNonNull(c);
    boolean modified = false;
    Iterator<?> it = iterator();
    while (it.hasNext()) {
        if (c.contains(it.next())) {
            it.remove();
            modified = true;
        }
    }
    return modified;
}
//取交集
public boolean retainAll(Collection<?> c) {
    Objects.requireNonNull(c);
    boolean modified = false;
    Iterator<E> it = iterator();
    while (it.hasNext()) {
        if (!c.contains(it.next())) {
            it.remove();
            modified = true;
        }
    }
    return modified;
}

public void clear() {
    Iterator<E> it = iterator();
    while (it.hasNext()) {
        it.next();
        it.remove();
    }
}

public String toString() {
    Iterator<E> it = iterator();
    if (! it.hasNext())
        return "[]";

    StringBuilder sb = new StringBuilder();
    sb.append('[');
    //循环的条件没有写在for语句当中
    //就是没有任何条件，为死循环
    for (;;) {
        E e = it.next();
        sb.append(e == this ? "(this Collection)" : e);
        //退出的条件
        if (! it.hasNext())
            return sb.append(']').toString();
        sb.append(',').append(' ');
    }
}
